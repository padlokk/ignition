# Cage Development Tasks

**Updated:** 2025-09-27
**Current Version:** 0.3.1
**Status:** Planning Refresh (CAGE/BUG/TEST series)

## Story Point Scale
- 1 pt = 1-2 hours (simple fix/addition)
- 3 pts = 4-6 hours (moderate implementation)
- 5 pts = 1-2 days (complex feature)
- 8 pts = 3-5 days (major system component)

---

## Critical Bugs (Blocking Production)

### BUG-01: Preserve Original Extensions During Lock/Unlock [3 pts]
**Location:** `src/cage/lifecycle/crud_manager.rs:857-907`
**Issue:** `lock_single_file` rewrites filenames to `<stem>.cage`, breaking documented `file.ext.cage` flow and round-trip unlock.
**Fix Checklist:**
- [ ] Append configured extension to the full name (e.g. `report.pdf.cage`).
- [ ] Update unlock logic to strip only the configured suffix.
- [ ] Adjust CLI examples/tests after the change.
- [ ] Add regression tests covering nested extensions.

### BUG-02: Recursive Operations Ignore Subdirectories [5 pts]
**Location:** `collect_files_with_pattern` & friends (`src/cage/lifecycle/crud_manager.rs:921-960, 1120-1160`)
**Issue:** `read_dir` is non-recursive, so `--recursive`, `status`, and `verify` skip nested trees.
**Fix Checklist:**
- [ ] Implement depth-first traversal with symlink guards.
- [ ] Respect pattern filters across depth.
- [ ] Share traversal between lock/unlock/status/verify.
- [ ] Add integration coverage for nested directories.

### BUG-03: Pattern Filters Treat Globs as Literal Substrings [3 pts]
**Location:** Same traversal helpers (`contains(pattern)` logic).
**Issue:** CLI advertises glob usage (`--pattern "*.log"`), but current logic never matches such inputs.
**Fix Checklist:**
- [ ] Replace substring check with glob matcher (e.g. `globset`).
- [ ] Support negation/advanced patterns if feasible.
- [ ] Document accepted syntax and update help output.
- [ ] Add unit tests for positive/negative cases.

### BUG-04: Unlock Options Ignored [3 pts]
**Location:** `unlock_single_file` (`src/cage/lifecycle/crud_manager.rs:933-947`).
**Issue:** `_options` is unused; encrypted artifacts are always preserved and selective unlock is impossible.
**Fix Checklist:**
- [ ] Honour `preserve_encrypted` by optionally deleting ciphertext.
- [ ] Honour `selective` / pattern-driven unlock.
- [ ] Extend CLI feedback for skipped/deleted files.
- [ ] Add tests validating option behaviour.

### BUG-05: Proxy Command Still Uses Expect Script [5 pts]
**Location:** `execute_proxy_command` (`src/bin/cli_age.rs:959-1119`).
**Issue:** Hand-written `expect` script contradicts PTY migration (`docs/tech/CAGE_PTY_FIX.md`) and is Unix-only.
**Fix Checklist:**
- [ ] Reuse `PtyAgeAutomator` for proxy mode.
- [ ] Provide stdin/interactive passphrase handling without external tools.
- [ ] Gate Unix-specific code; offer meaningful error or alternative on Windows.
- [ ] Add proxy-specific integration tests.

---

## Core Feature Work (CAGE Series)

### CAGE-01: Implement Key Rotation Lifecycle [8 pts]
**Source:** Former TASK-001 (`src/cage/lifecycle/crud_manager.rs:196-400`).
**Deliverables:** Atomic old→new passphrase rotation with backup/rollback, permission preservation, and coverage.

### CAGE-02: File Integrity Verification System [5 pts]
**Source:** Former TASK-002 (`src/cage/lifecycle/crud_manager.rs:1000-1106`).
**Deliverables:** Header/format validation, optional decrypt probe, structured reporting, and corruption handling.

### CAGE-03: Backup & Recovery Pipeline [5 pts]
**Source:** Former TASK-003.
**Deliverables:** Functional `--backup` flag, configurable retention, conflict handling, and restore hooks.

### CAGE-04: In-Place Operation Safety Layers [5 pts]
**Location:** `src/bin/cli_age.rs:569-760`, `src/cage/in_place.rs`.
**Scope:** Finish SafetyValidator/RecoveryManager wiring, ensure metadata preservation, document danger mode, and test rollback.

### CAGE-05: Progress & Telemetry Surface [3 pts]
**Location:** Progress manager utilities.
**Scope:** Integrate spinner/bar styles with CRUD operations, respect verbosity flags, and expose hooks for long jobs.

### CAGE-06: Configuration File Support [5 pts]
**Location:** `src/cage/config.rs`.
**Scope:** Layered `~/.cagerc` / project config loading, validation, overrides, and CLI subcommands.

### CAGE-07: RageAdapter Implementation [8 pts]
**Location:** `src/cage/adapter.rs:117-157`.
**Scope:** Integrate `rage` crate, match shell adapter parity, add selection heuristics, and document usage.

---

## Test & Tooling Improvements (TEST Series)

### TEST-01: Align CLI Suites with Current Binary [3 pts]
**Location:** `tests/cli/*.sh`.
**Issue:** Scripts call `./target/debug/cli_age` / `cli_auth` which no longer exist; suites never exercise `cage` binary.
**Tasks:**
- [ ] Update invocations to the `cage` executable (and drop defunct `cli_auth`).
- [ ] Refresh scenarios to cover recursion/pattern cases once fixed.
- [ ] Add CI guard to ensure scripts run under `cargo test` or dedicated harness.

### TEST-02: Regression Coverage for BUG-01..04 [3 pts]
**Scope:** Add targeted unit/integration tests to lock in newly fixed behaviours (extensions, recursion, globbing, unlock options).

### TEST-03: Proxy PTY Integration Tests [2 pts]
**Scope:** Once BUG-05 is addressed, add cross-platform proxy tests (skipping gracefully where PTY unavailable).

---

## Future Infrastructure (INFRA Series)

### INFRA-01: Migrate to RSB dev-pty Module [COMPLETE via Hub] ✅
**Background**: RSB 0.6.2 includes `dev-pty` feature with `rsb::dev::pty` module, but API exports don't match `portable-pty` interface.
**Solution**: Migrated to Hub's `terminal-ext` feature which provides `portable-pty` via RSB ecosystem.
**Benefits**: ✅ Achieved - Reduced dependency count, better RSB ecosystem integration via Hub.
**Status**: Completed using `hub = { git = "https://github.com/oodx/hub.git", features = ["terminal-ext"] }`.

---

## Notes
- Keep CHANGELOG entries aligned with CAGE/BUG/TEST identifiers.
- Prioritise BUG-01..05 before starting new CAGE work; they unblock documented scenarios.
- Coordinate config and backup changes with documentation updates in README and `docs/tech/*`.
